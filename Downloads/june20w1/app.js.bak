var express = require('express');
var app = express();
var server = require('http').Server(app)
var io = require('socket.io')();
var uuid = require('node-uuid');
var Q = require('q');
var _ = require("underscore")
var dbFunctions = require('./dbStore/dbFunctions');
var config = require('./config');
var mail = require('./mail');	//Configure mail.js and un-comment the mail code
var btoa = require('btoa');		//Password is btoa hashed 
var c=0;
var a=0;
var bodyParser = require('body-parser');
var admins = {};
var users = {};
var Connection = require('tedious').Connection;  
var Request = require('tedious').Request;  
var TYPES = require('tedious').TYPES;  
var async = require('async');
var connectionsLimit = 6
var result = "";
const os = require('os');
var io1=os.networkInterfaces();


io.on('connection', function (socket) {

  if (io.engine.clientsCount > connectionsLimit) {
    socket.emit('err', { message: 'reach the limit of connections' })
    socket.disconnect()
    console.log('Disconnected...')
    return
  }
  

})
var config1 = {
	userName: 'datapullman',  
	password: 'system',  
	server: 'localhost',
	options: {
		// encrypt: true, /*If you are connecting to a Microsoft Azure SQL database, you will need this*/
		database: 'Chat11'
	}
}

var connection = new Connection(config1);  
dbFunctions.ConnectToRedis(startApp);

connection.on('connect', function(err) {  
    if (err) {
        console.log(err);
    }  
    else    {
		console.log("Connected");
		


	}

});

app.get('/', function(req, res) {
	res.sendFile(__dirname + '/views/client.html');


	
a=a+1;
console.log("a",a);
});
app.get('/Registration', function(req, res) {
	res.sendFile(__dirname + '/views/Reg.html'); 
console.log("Registration page Displayed");

});
app.get('/ping', function(req, res) {
	res.setHeader('Access-Control-Allow-Origin', config.parentDomain);
	res.send("OK");
});

app.get(config.admin_url, function(req, res) {
	res.sendFile(__dirname + '/views/admin.html');
});







//Note that in version 4 of express, express.bodyParser() was
//deprecated in favor of a separate 'body-parser' module.
app.use(bodyParser.urlencoded({ extended: true })); 

//app.use(express.bodyParser());
 
app.post('/adminURL', function(req, res) {
  //res.send('You sent the name "' + req.body.name + '".');
  //res.send('Your first name is "'+req.body.firstname+'".');
  	res.sendFile(__dirname + '/views/admin.html');
	
    	Insert(req.body.firstname,req.body.lastname,req.body.username,req.body.password,req.body.gender,req.body.email,req.body.address,req.body.phonenumber);
	 console.log(req.body.firstname);
	//Insert1(req.body.usernameInput,req.body.passwordInput);
	
 });
  
  

	function Insert(firstname, lastname,username,password,gender,email,address,phonenumber, callback){
			
	
			request = new Request('Get_Admin_Registration',function(err){  
				 if (err) {
						console.log(err);
					}  
				}
			);  
			request.addParameter('F_Name', TYPES.VarChar, firstname);  
			request.addParameter('L_Name', TYPES.VarChar, lastname);  
			request.addParameter('Admin_Name', TYPES.VarChar, username);  
			request.addParameter('Pass_Word', TYPES.VarChar, password); 
			request.addParameter('Gender', TYPES.VarChar, gender); 
			request.addParameter('Email', TYPES.VarChar, email); 
			request.addParameter('Address1', TYPES.VarChar, address); 
			request.addParameter('Ph_No', TYPES.VarChar, phonenumber); 
	
			// Check how many rows were inserted
			request.on('doneInProc', function(rowCount, more) {  
				console.log(rowCount + ' row(s) inserted');  
				console.log("Inserting into Table for Registration...");
		
			});             
	
			connection.callProcedure(request); 
				
		}
		
		
		
		
	/*		function Insert1(username,password){
			console.log("Inserting into Table for Login...");
	
		var	request = new Request("INSERT  Login(username,password) OUTPUT INSERTED.slno VALUES (@username,@password);", function(err){  
				 if (err) {
						console.log(err);
					}  
				}
			);  
			
			request.addParameter('username', TYPES.VarChar, username);  
			request.addParameter('password', TYPES.VarChar, password);
			
			// Check how many rows were inserted
			request.on('doneInProc', function(rowCount, more) {  
				console.log(rowCount + ' row(s) inserted'); 
console.log("Values are inserted for login");				
		
			});             
	
			connection.execSql(request);  
		}   */
		
		

		
app.use(express.static(__dirname + '/public'));

io.on('connection', function(socket) {
	
 	 var lan=io1['Local Area Connection'];
	 console.log("This is Lan details", lan);
	 var mac_ip=lan[3];
	var Mac_Address = mac_ip['mac']; //mac
	 var Admin_Login_Ip = mac_ip['address'];  //ip
	 var Admin_Login_Port = config.web_port;  //port
	 
  	 
	//Login Admin
	socket.on('login', function(data) {
		var a=data['admin'];
		var b=data['password'];

        console.log("Username and Password is ",a,b);
		console.log("admin name: "+data.admin+" password:"+data.password);
 					Admin_Login(a,b,Admin_Login_Ip,Admin_Login_Port,Mac_Address);

					
		function Admin_Login(a,b,Admin_Login_Ip,Admin_Login_Port,Mac_Address){
			console.log("Inserting into Table for Login");
			request = new Request('Let_Admin_Login', function(err){
				if (err) {
					console.log(err);
					var rr=err['message'];
					console.log("rr",rr);
					if(rr!=null){
						console.log('testing rr',rr);
 						socket.emit('login', {
				login: false,
				err: rr
			})
					}else{
								socket.emit('login', {
				login: false,
				err: "Invalid Login"
			})
					
						
					}
			
				}
				else{
					
					
					
					socket.emit('login', {
						login: true
					});
				}
 				
		});				
				request.addParameter('Admin_Name', TYPES.VarChar, a);
				request.addParameter('Pass_Word', TYPES.VarChar, b);
				request.addParameter('Admin_Login_Ip', TYPES.VarChar, Admin_Login_Ip);
				request.addParameter('Admin_Login_Port', TYPES.VarChar, Admin_Login_Port);
				request.addParameter('Mac_Address', TYPES.VarChar,Mac_Address);							
				// Check how many rows were inserted
				request.on('doneInProc', function(rowCount, more) {
					console.log(rowCount + ' row(s) inserted');
				});
			connection.callProcedure(request);
		}
					
	
	});	
	//Init admin

	socket.on('add admin', function(data) {
		this.isAdmin = data.isAdmin;
		socket.username = data.admin;
 
		_.each(admins, function(adminSocket) {
			adminSocket.emit("admin added", socket.username)
			socket.emit("admin added", adminSocket.username)
		});

		admins[socket.username] = socket;

		//If some user is already online on chat
		if (Object.keys(users).length > 0) {
			_.each(users, function(userSocket) {
				dbFunctions.getMessages(userSocket.roomID, 0)
					.then(function(history) {
						var len = history.length;
						console.log(len);
						var userSocket = users[history[len - 1]];
						history.splice(-1, 1);
						socket.join(userSocket.roomID);
						socket.emit("New Client", {
							roomID: userSocket.roomID,
							history: history,
							details: userSocket.userDetails,
							justJoined: true
							
						}
					)
					})
			});
		}
	});	
	//Init user
	socket.on('add user', function(data) {

		socket.isAdmin = false;
	
			c=c+1;
			console.log("c",c);
		if (data.isNewUser) {
			data.roomID = uuid.v4();
			dbFunctions.setDetails(data);
			socket.emit("roomID", data.roomID);
			
		}
		socket.roomID = data.roomID;
		//Fetch user details
		dbFunctions.getDetails(socket.roomID)
			.then(function(details) {
				socket.userDetails = details;
			})
			.catch(function(error) {
				console.log("Line 95 : ", error)
			})
			.done();
		socket.join(socket.roomID);
		var newUser = false;
		if (!users[socket.roomID]) {  // Check if different instance of same user. (ie. Multiple tabs)
			users[socket.roomID] = socket;
			newUser = true;
		}
		//Fetch message history
		dbFunctions.getMessages(socket.roomID, 0)
			.then(function(history) {
				history.splice(-1, 1)
				socket.emit('chat history', {
					history: history,
					getMore: false
				});
				if (Object.keys(admins).length == 0) {
					//Tell user he will be contacted asap and send admin email
					socket.emit('log message', "Thank you for reaching us." +
						" Please leave your message here and we will get back to you shortly.");
					/*mail.alertMail();*/
				} else {
					if (newUser) {
						socket.emit('log message', "Hello User, How can I help you?");
						
						//Make all available admins join this users room.
						_.each(admins, function(adminSocket) {
							adminSocket.join(socket.roomID);
							adminSocket.emit("New Client", {
								roomID: socket.roomID,
								history: history,
								details: socket.userDetails,
								justJoined: false
							})
						});
					}
				}
			})
			.catch(function(error) {
				console.log("Line 132 : ", error)
			})
			.done();
		dbFunctions.getMsgLength(socket.roomID)
			.then(function(len) {
				socket.MsgHistoryLen = (len * -1) + 10;
				socket.TotalMsgLen = (len * -1);
			})
			.catch(function(error) {
				console.log("Line 140 : ", error)
			})
			.done();
	});

	socket.on('chat message', function(data) {
		if (data.roomID === "null")
			data.roomID = socket.roomID;
		data.isAdmin = socket.isAdmin;
		dbFunctions.pushMessage(data);
		console.log(socket.roomID);
		console.log(socket.isAdmin);
		console.log('data',data);

 var k=data['msg'];
 var k1=data['isAdmin'];
 var k2=data['timestamp'];
 var k3=data['roomID'];
 console.log('k1',k1);
		console.log((data['msg']));
		if(k1==false){
			Insert('client',k,k2,k3);

		}
else{
	
	Insert('agent',k,k2,k3);

}
		

		function Insert(name, msg,timestamp,roomID, callback){
			console.log("Inserting into Table...");
	
			request = new Request("INSERT  chat_history (name, msg,timestamp,roomID) OUTPUT INSERTED.slno VALUES (@Name, @msg,@timestamp,@roomID);", function(err){  
				 if (err) {
						console.log(err);
					}  
				}
			);  
			request.addParameter('name', TYPES.VarChar, name);  
			request.addParameter('msg', TYPES.VarChar, msg);  
			request.addParameter('timestamp', TYPES.VarChar, timestamp);  
			request.addParameter('roomID', TYPES.VarChar, roomID); 
	
	
			// Check how many rows were inserted
			request.on('doneInProc', function(rowCount, more) {  
				console.log(rowCount + ' row(s) inserted');  
		
			});             
	
			connection.execSql(request);  
		}



	
		socket.broadcast.to(data.roomID).emit('chat message', data);
	});

	socket.on("typing", function(data) {
		socket.broadcast.to(data.roomID).emit("typing", {
			isTyping: data.isTyping,
			person: data.person,
			roomID: data.roomID
		});
	});

	socket.on('disconnect', function() {
		if (socket.isAdmin) {
			delete admins[socket.username];
			_.each(admins, function(adminSocket) {
				adminSocket.emit("admin removed", socket.username)
			});
		} else {
			if (io.sockets.adapter.rooms[socket.roomID]) {
				var total = io.sockets.adapter.rooms[socket.roomID]["length"];
				var totAdmins = Object.keys(admins).length;
				var clients = total - totAdmins;
				if (clients == 0) {
					//check if user reconnects in 4 seconds 
					setTimeout(function() {
						if (io.sockets.adapter.rooms[socket.roomID])
							total = io.sockets.adapter.rooms[socket.roomID]["length"];
						totAdmins = Object.keys(admins).length;
						if (total <= totAdmins) {
							/*mail.sendMail({
								roomID: socket.roomID,
								MsgLen: socket.TotalMsgLen,
								email: socket.userDetails
							});*/
							delete users[socket.roomID];
							socket.broadcast.to(socket.roomID).emit("User Disconnected", socket.roomID);
							_.each(admins, function(adminSocket) {
								adminSocket.leave(socket.roomID)
							});
						}
					}, 4000);
				}
			} else {
				if (socket.userDetails)
					/*mail.sendMail({
						roomID: socket.roomID,
						MsgLen: socket.TotalMsgLen,
						email: socket.userDetails
					});*/
				delete users[socket.roomID];
			}
		}
	});

	socket.on('poke admin', function(targetAdmin) {
		admins[targetAdmin].emit("poke admin", {})
	});

	socket.on('client ack', function() {
		for (adminSocket in admins) {
			if (!admins.hasOwnProperty(adminSocket)) {
				continue;
			}
			admins[adminSocket].emit("client ack", {})
		}
	});

	socket.on("more messages", function() {
		if (socket.MsgHistoryLen < 0) {
			dbFunctions.getMessages(socket.roomID, socket.MsgHistoryLen)
				.then(function(history) {
					history.splice(-1, 1)
					socket.emit('more chat history', {
						history: history
					});
				})
			socket.MsgHistoryLen += 10;
		}
	});
});

function startApp(isSuccess) {
	if (isSuccess) {
		server.listen(config.web_port, function() {
			console.log('Server started ' + config.web_port + ' at ' +
				(new Date().toLocaleString().substr(0, 24)));
		});
		io.attach(server, {
			'pingInterval': 15000,
			'pingTimeout': 15000
		});
	} else {
		console.log("Server failed to start.");
	}
}